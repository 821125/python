from random import randint

"""
1. Написать программу, которая будет складывать, вычитать, умножать или делить два числа. Числа и знак операции
вводятся пользователем. После выполнения вычисления программа не должна завершаться, а должна запрашивать новые данные
для вычислений. Завершение программы должно выполняться при вводе символа '0' в качестве знака операции.
Если пользователь вводит неверный знак (не '0', '+', '-', '*', '/'), то программа должна сообщать ему об ошибке и снова
запрашивать знак операции. Также сообщать пользователю о невозможности деления на ноль,
если он ввел 0 в качестве делителя.
2. Посчитать четные и нечетные цифры введенного натурального числа. Например, если введено число 34560,
то у него 3 четные цифры (4, 6 и 0) и 2 нечетные (3 и 5).
3. Сформировать из введенного числа обратное по порядку входящих в него цифр и вывести на экран. Например, если введено
число 3486, то надо вывести число 6843.
4. Найти сумму n элементов следующего ряда чисел: 1 -0.5 0.25 -0.125 ...Количество элементов (n) вводится с клавиатуры.
5. Вывести на экран коды и символы таблицы ASCII, начиная с символа под номером 32 и заканчивая 127-м включительно.
Вывод выполнить в табличной форме: по десять пар "код-символ" в каждой строке.
6. В программе генерируется случайное целое число от 0 до 100.
Пользователь должен его отгадать не более чем за 10 попыток. После каждой неудачной попытки должно сообщаться больше
или меньше введенное пользователем число, чем то, что загадано. Если за 10 попыток число не отгадано, то вывести
загаданное число.
7. Напишите программу, доказывающую или проверяющую, что для множества натуральных чисел выполняется равенство:
1 + 2 + ... + n = n * (n + 1) / 2, где n - любое натуральное число.
8. Посчитать, сколько раз встречается определенная цифра в введенной последовательности чисел. Количество вводимых
чисел и цифра, которую необходимо посчитать, задаются вводом с клавиатуры.
9. Среди натуральных чисел, которые были введены, найти наибольшее по сумме цифр.
Вывести на экран это число и сумму его цифр.
"""

# Задача 1

print('''
1. Написать программу, которая будет складывать, вычитать, умножать или делить два числа. Числа и знак операции
вводятся пользователем. После выполнения вычисления программа не должна завершаться, а должна запрашивать новые данные
для вычислений. Завершение программы должно выполняться при вводе символа '0' в качестве знака операции.
Если пользователь вводит неверный знак (не '0', '+', '-', '*', '/'), то программа должна сообщать ему об ошибке и снова
запрашивать знак операции. Также сообщать пользователю о невозможности деления на ноль,
если он ввел 0 в качестве делителя.
''')

while True:
    try:
        a, b, c = input('Enter mathematical expression (like 2 + 2, or enter 0 for exit): ').split()
        if b == '0':
            print('end')
            break
        elif c == '0':
            print('error - division by zero')
        elif b in '+-*/':
            if b == '+':
                print(f'{a} + {c} = {int(a) + int(c)}')
            elif b == '-':
                print(f'{a} - {c} = {int(a) - int(c)}')
            elif b == '*':
                print(f'{a} * {c} = {int(a) * int(c)}')
            else:
                print(f'{a} / {c} = {int(a) / int(c)}')
        else:
            print('error')
    except ValueError:
        print('ValueError')

print('''
2. Посчитать четные и нечетные цифры введенного натурального числа. Например, если введено число 34560,
то у него 3 четные цифры (4, 6 и 0) и 2 нечетные (3 и 5).
''')

num, even, odd = input('Enter an integer: '), 0, 0

for digit in num:
    if int(digit) % 2:
        odd += 1
    else:
        even += 1
print(f'even = {even}, odd = {odd}')

print('''
3. Сформировать из введенного числа обратное по порядку входящих в него цифр и вывести на экран. Например, если введено
число 3486, то надо вывести число 6843.
''')

print(input('Enter a number: ')[::-1])


# Решение через рекурсию
def rec(number):
    if number < 10:
        return number
    return int(str(number % 10) + str(rec(number // 10)))


print(rec(3486))

print('''
4. Найти сумму n элементов следующего ряда чисел: 1 -0.5 0.25 -0.125 ...Количество элементов (n) вводится с клавиатуры.
''')

n = int(input('Enter the number of products: '))
range_number = 1
s = 0

for _ in range(n):
    s += range_number
    range_number /= -2
print(f'sum = {s}')


# Решение через рекурсию
def rec_sum(s_n, d, n_v):
    if n_v == 0:
        return 0
    return s_n + rec_sum(s_n / d, d, n_v - 1)


print(rec_sum(1, -2, 4))

print('''
5. Вывести на экран коды и символы таблицы ASCII, начиная с символа под номером 32 и заканчивая 127-м включительно.
Вывод выполнить в табличной форме: по десять пар "код-символ" в каждой строке.
''')

for i, char in enumerate(range(32, 128), start=1):
    if i % 10 == 0:
        print(f'{char:5}: {chr(char)}')
    else:
        print(f'{char:5}: {chr(char)}', end=' ')

print('''
6. В программе генерируется случайное целое число от 0 до 100.
Пользователь должен его отгадать не более чем за 10 попыток. После каждой неудачной попытки должно сообщаться больше
или меньше введенное пользователем число, чем то, что загадано. Если за 10 попыток число не отгадано, то вывести
загаданное число.
''')

num, guess, count = randint(0, 100), None, 0

while count < 10:
    count += 1
    print(f'You have {11 - count} attempts')
    guess = int(input('guess the number: '))
    if num == guess:
        print('your win')
        break
    elif num < guess:
        print(f'{guess} > than the number')
    else:
        print(f'{guess} < than the number')

if num != guess:
    print(f'the number was {num}')

print('''
7. Напишите программу, доказывающую или проверяющую, что для множества натуральных чисел выполняется равенство:
1 + 2 + ... + n = n * (n + 1) / 2, где n - любое натуральное число.
''')

print('''
Чтобы доказать равенство, вычислим отдельно его левую и правую части и сравним их.
Правая часть n * (n + 1) / 2 вычисляется просто как выражение.
Для вычисления левой части 1 + 2 + ... + n используем цикл
''')

n = randint(1, 10000)
s = sum(range(1, n + 1))
m = n * (n + 1) // 2
print(s, '=', m)

print('''
8. Посчитать, сколько раз встречается определенная цифра в введенной последовательности чисел. Количество вводимых
чисел и цифра, которую необходимо посчитать, задаются вводом с клавиатуры.
''')

lst = list(map(int, input('enter a sequence of numbers: ').split()))
n = int(input('enter a number: '))
print('count = ', lst.count(n))

print('''
9. Среди натуральных чисел, которые были введены, найти наибольшее по сумме цифр.
Вывести на экран это число и сумму его цифр.
''')

lst = list(map(int, input('enter a sequence of numbers: ').split()))
max_s = 0
max_m = 0
for i in lst:
    sum_s = sum(map(int, str(i)))
    if sum_s > max_s:
        max_s = sum_s
        max_m = i
print('max sum =', max_s)
print('max number =', max_m)


# Решение через функцию
def seek_max(lst_n):
    max_s_ = 0
    max_m_ = 0
    for i_ in lst:
        sum_s_ = sum(map(int, str(i)))
        if sum_s_ > max_s_:
            max_s_ = sum_s_
            max_m_ = i_
        return f'max sum = {max_s_} max number = {max_m_}'


lst = list(map(str, (randint(100, 999) for _ in range(15))))
print(lst)
print(seek_max(lst))

if __name__ == "__main__":
    rec_sum.main()
